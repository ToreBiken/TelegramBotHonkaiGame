import logging
import random
import sqlite3
import time
from datetime import datetime, timedelta
import pytz
import re
import threading
import html
import asyncio
import dataset
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

try:
    warp_command_count = {}
    user_state = {}

    logging.basicConfig(level=logging.INFO)
    PROXY_URL = 'http://proxy.server:3128'
    bot = Bot(token='6317450812:AAGLBdCJ-o6z6Oao9PiDVleMANus-eMgJDI',proxy=PROXY_URL)
    dp = Dispatcher(bot)

    db_connection = sqlite3.connect('genshin_inventory.db', check_same_thread=False)
    db_cursor = db_connection.cursor()
    db_lock = threading.Lock()

    db_cursor.execute('''CREATE TABLE IF NOT EXISTS inventory (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        user_name TEXT,
                        item_name TEXT,
                        item_rarity TEXT,
                        item_quantity INTEGER DEFAULT 0,
                        UNIQUE (user_id, item_name, item_rarity))''')
    db_connection.commit()




    def get_astana_midnight():
        try:
            utc_now = datetime.utcnow()
            astana_tz = pytz.timezone('Asia/Almaty')
            astana_now = utc_now.replace(tzinfo=pytz.utc).astimezone(astana_tz)
            astana_midnight = astana_now.replace(hour=0, minute=0, second=0, microsecond=0)
            midnight_utc = astana_midnight.astimezone(pytz.utc)
            return midnight_utc.timestamp()
        except Exception as e:
            print("Error in get_astana_midnight:", e)


    def reset_command_count():
        while True:
            now = datetime.now(pytz.timezone('Asia/Almaty'))
            midnight = now.replace(hour=0, minute=0, second=0, microsecond=0)
            next_midnight = midnight + timedelta(days=1)
            time_until_midnight = (next_midnight - now).total_seconds()

            time.sleep(time_until_midnight)

            warp_command_count.clear()


    threading.Thread(target=reset_command_count).start()


    @dp.message_handler(lambda message: re.match(r'^/warp', message.text, re.IGNORECASE))
    async def wish(message: types.Message):
        try:
            if message.chat.type != 'private':
                try:
                    user_id = message.from_user.id
                    user_name = message.from_user.first_name
                    if message.from_user.username:
                        user_name = "@" + message.from_user.username

                    now = datetime.now(pytz.timezone('Asia/Almaty'))
                    today = now.replace(hour=0, minute=0, second=0, microsecond=0)

                    if user_id in warp_command_count and warp_command_count[user_id] >= 3:
                        not_allowed_more_one = await bot.send_message(message.chat.id,
                                                                      '–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç—Ä–∏ –ø—Ä—ã–∂–∫–∞ –≤ –¥–µ–Ω—å.')
                        return

                    if user_id not in warp_command_count or warp_command_count[user_id] == 0:
                        warp_command_count[user_id] = 1
                    else:
                        warp_command_count[user_id] += 1

                    item_rarity = random.choices(['3-star', '4-star', '5-star', '6-star'], weights=[70, 22, 5, 3], k=1)[
                        0]
                    item_data = random.choice(dataset.dataset[item_rarity])
                    item_image_path = item_data["image_path"]
                    item_characteristic = item_data["characteristic"]
                    item_description = item_data["description"]
                    escaped_description = html.escape(item_description).replace("\uFFFD", "")
                    message_text = (
                        f'<b>{user_name} –í—ã –ø–æ–ª—É—á–∏–ª–∏</b> {item_data["name"]} \n\n'
                        f'–†–µ–¥–∫–æ—Å—Ç—å: {get_rarity_emoji(item_rarity)} \n\n'
                        f'<strong>{item_characteristic}</strong> \n\n'
                        f'{escaped_description}'
                    )

                    if len(message_text) > 1024:
                        message_parts = [message_text[i:i + 1024] for i in range(0, len(message_text), 1024)]
                    else:
                        message_parts = [message_text]

                    with open(item_image_path, 'rb') as img_file:
                        for part in message_parts:
                            congra_win = await bot.send_photo(message.chat.id, img_file, caption=part,
                                                              parse_mode='HTML')

                    with db_lock:
                        db_cursor.execute(
                            'INSERT OR REPLACE INTO inventory (user_id, user_name, item_name, item_rarity, item_quantity) '
                            'VALUES (?, ?, ?, ?, COALESCE((SELECT item_quantity FROM inventory WHERE user_id = ? AND item_name = ? AND item_rarity = ?), 0) + 1)',
                            (user_id, user_name, item_data["name"], item_rarity, user_id, item_data["name"],
                             item_rarity))

                        db_connection.commit()
                except Exception as e:
                    print(e)
                    tex_work = await bot.send_message(message.chat.id, "–æ—à–∏–±–∫–∞, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –ø—Ä—ã–∂–æ–∫")
                    warp_command_count[user_id] -= 1
                    await asyncio.sleep(1)
                    await bot.delete_message(message.chat.id, tex_work.message_id)

            else:
                not_allowed_only_private = await bot.send_message(message.chat.id,
                                                                  '–ù–µ–ª—å–∑—è –ø—Ä—ã–≥–∞—Ç—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!')
        except Exception as e:
            print("Error in warp:", e)


    def get_rarity_emoji(rarity):
        try:
            if rarity == '5-star':
                return '‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è'
            elif rarity == '4-star':
                return '‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è'
            elif rarity == '3-star':
                return '‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è'
            elif rarity == '6-star':
                return '‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è'
            else:
                return ''
        except Exception as e:
            print("Error in get_rarity_emoji:", e)


    def get_item_emoji(item_rarity):
        try:
            item_emoji = {
                '6-star': 'üèÖ',
                '5-star': 'üíé',
                '4-star': '‚öîÔ∏è',
                '3-star': 'üó°',
            }
            return item_emoji.get(item_rarity, '')
        except Exception as e:
            print("Error in get_item_emoji:", e)


    rules = """–ü—Ä–∞–≤–∏–ª–∞
    –û–±—â–µ–µ

    1.1‚ùóÔ∏è–ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ö–∞–∫ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ, —Ç–∞–∫ –∏ –∫–æ—Å–≤–µ–Ω–Ω–æ

    1.2‚ùóÔ∏è–ó–∞–ø—Ä–µ—â–µ–Ω—ã –ª—é–±—ã–µ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è

    1.3‚ùóÔ∏è–ó–∞–ø—Ä–µ—â–µ–Ω—ã –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–µ—Å—É—â–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∞–≥–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä

    1.4‚ùóÔ∏è–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É—é—â–∏–π —Å–ª—É—á–∞–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∏–ª–∏ —á–ª–µ–Ω–æ–≤—Ä–µ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ, —Ä–µ–∫–ª–∞–º–∏—Ä—É—é—â–∏–π –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç—å —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –∏ —Ç.–ø.

    1.5‚ùóÔ∏è–ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å, —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–æ—â—Ä–µ–Ω–∏–∏ –ª—é–±–æ–π –≤—ã—è–≤–ª–µ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    1.6‚ùóÔ∏è–ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞–∑–∂–∏–≥–∞–Ω–∏–µ –º–µ–∂–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–æ–∑–Ω–∏, –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –∏ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω–æ–π –ø–æ—á–≤–µ, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è –∏ —Ç.–ø.

    1.7‚ùóÔ∏è–ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–≥–æ, —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –≤–∫–ª—é—á–∞—è –∫–æ–Ω—Ç–µ–Ω—Ç "–≥–∞—á–∏" —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏ –±–µ–∑ –∏—Ö —Å–æ–≥–ª–∞—Å–∏—è, –∞ —Ç–∞–∫–∂–µ –≤ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Å—Ñ–µ—Ä–µ —Å–µ–∫—Å—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö

    1.8‚ùóÔ∏è–ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∂–µ—Å—Ç–æ–∫–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏

    1.9‚ùóÔ∏è–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏–∫–∏ —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–æ–≤ –∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –ø—Ä–∏–∑—ã–≤ –∫ –Ω–∞—Å–∏–ª–∏—é –∏ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º—É

    –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫

    2.1‚ùóÔ∏è–ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥–æ–Ω–∞—Ç-—Å–∞–π—Ç—ã, –ø–ª–æ—â–∞–¥–∫–∏ –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π, —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–π –ø–æ–º–æ—â–∏, –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ—Ö–æ–∂–µ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏

    2.2‚ùóÔ∏è–ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è —Ä–µ–∫–ª–∞–º–∞ –±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–ª—É–±–∞

    –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ

    3.1‚ùóÔ∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª—É–±–∞ –ø–æ –ø—Ä–∞–≤—É —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω

    3.2‚ùóÔ∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª—É–±–∞ –≤ –ø—Ä–∞–≤–µ –∏–∑–º–µ–Ω—è—Ç—å/–¥–æ–ø–æ–ª–Ω—è—Ç—å/–æ–±–Ω–æ–≤–ª—è—Ç—å –Ω—ã–Ω–µ—à–Ω—é—é —Ä–µ–¥–∞–∫—Ü–∏—é –ø—Ä–∞–≤–∏–ª –±–µ–∑ –ø—Ä–∞–≤–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

    3.3‚ùóÔ∏è–ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª, –∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –º–µ—Ä—ã –Ω–∞–∫–∞–∑–∞–Ω–∏—è, –≤–ø–ª–æ—Ç—å –¥–æ –ø–æ–ª–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—É–±—É.

    3.4‚ùóÔ∏è–ù–µ–∑–Ω–∞–Ω–∏–µ –∏–ª–∏ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏

    3.5‚ùóÔ∏è–ï—Å–ª–∏ –≤—ã –Ω–∞—Ä—É—à–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–ª—É–±–∞, —Ç–æ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ü–æ—Å–ª–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –º—ã –∑–∞–±–ª–æ–∫–∏—Ä—É–µ–º –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—â–∞—Ç—å—Å—è (–≤—ã–¥–∞–µ–º –º—É—Ç) —Å—Ä–æ–∫–æ–º –Ω–∞ 24 —á–∞—Å–∞. –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–æ–≤–ª–µ–∫—É—Ç –∑–∞ —Å–æ–±–æ–π –±–æ–ª–µ–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. (–∑–∞–ø—Ä–µ—Ç)

    3.6‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –Ω–∞—Ä—É—à–∞—é—â–∏–µ, –±—É–¥—É—Ç –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.

    –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ –∫–∞–∫–æ–π-–ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–µ –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∫–ª—É–±–∞. –≠—Ç–∏ –ª–∏—Ü–∞ –º–æ–≥–ª–∏ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∫–ª—É–±–∞ –∏–ª–∏ –∫–æ–¥–µ–∫—Å –ø–æ–≤–µ–¥–µ–Ω–∏—è, –∏–ª–∏ –æ–Ω–∏ –º–æ–≥–ª–∏ –≤–µ—Å—Ç–∏ —Å–µ–±—è –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–º –∏–ª–∏ –≤—Ä–µ–¥–Ω—ã–º –¥–ª—è –∫–ª—É–±–∞ –∏–ª–∏ –µ–≥–æ —á–ª–µ–Ω–æ–≤."""


    @dp.message_handler(commands=['rules'])
    async def send_rules(message: types.Message):
        await message.answer(rules, parse_mode='HTML')


    @dp.message_handler(commands=['report'])
    async def report(message: types.Message):
        try:
            report_text = message.text.replace('/report', '', 1).strip()

            if report_text:
                await bot.send_message(1047995825, f'{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –∂–∞–ª–æ–±—É:\n\n{report_text}')

                await message.reply('–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')

            else:
                await message.reply('–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /report')
        except Exception as e:
            print("Error in report:", e)


    @dp.message_handler(commands=['chats'])
    async def send_chats(message: types.Message):
        try:
            chat_info = """–î–µ–π—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã:

    DISCORD
    https://discord.gg/amzSYQ4XRg

    –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã

    –ë–æ–ª—å—à–∏–µ ( > 200 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)

    CS:GO
    –ê–¥–º–∏–Ω: @XeRReRa_WWS
    –ß–∞—Ç: https://t.me/aitucsgo

    DOTA 2
    –ê–¥–º–∏–Ω: @Cvrsxdcrovvn
    –ß–∞—Ç: https://t.me/+UYBeAiTl7kExNGIy

    VALORANT
    –ê–¥–º–∏–Ω: @plutoodo
    –ß–∞—Ç: https://t.me/+dYNShF5OSn02ZmU6

    Minecraft
    –ê–¥–º–∏–Ω: @airsmiann
    –ß–∞—Ç: https://t.me/+FWkWQFDofAI2Njli

    –°—Ä–µ–¥–Ω–∏–µ (50 - 200 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)

    Genshin
    –ê–¥–º–∏–Ω: @ToreBiken
    –ß–∞—Ç: https://t.me/AITUHoyoCLUB (This chat)

    MLBB
    –ê–¥–º–∏–Ω: @feeldraft
    –ß–∞—Ç: https://t.me/+LpsgQ4jqTMc0MmM6

    FIFA
    –ê–¥–º–∏–Ω: @alish_back
    –ß–∞—Ç: https://t.me/+b09BBUdQ339iNGUy

    –ú–∞–ª–µ–Ω—å–∫–∏–µ (< 50 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)

    Overwatch 2
    –ß–∞—Ç: https://t.me/+iwtR6LSb_S8wOWNi

    Tetris
    –ê–¥–º–∏–Ω: @uismuis
    –ß–∞—Ç: https://t.me/+i8tUXxuuysA5YzFi

    Hearthstone
    –ê–¥–º–∏–Ω: @4ry1337
    –ß–∞—Ç: https://t.me/+Wnw4R_erBaQyM2Ni

    PUBG / PUBGM
    –ê–¥–º–∏–Ω: @PELLUCCI
    –ß–∞—Ç: https://t.me/+DdQr4unqPE0yMjAy

    APEX
    –ê–¥–º–∏–Ω: @s0mebodhi
    –ß–∞—Ç: https://t.me/+9xsglBw6kCJhMWYy

    Supercell
    –ß–∞—Ç: https://t.me/+5kn947qf1gEzZWI6

    AITU GIRLS GAMING
    –ê–¥–º–∏–Ω: @RyUwUv
    –ß–∞—Ç: –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Ñ–æ—Ä–º–µ https://forms.office.com/r/Tq50ChmN22

    NBA 2023
    –ê–¥–º–∏–Ω: @nuralchik0303
    –ß–∞—Ç: https://t.me/+pq5jM0ZUiL05MTdi"""
            escaped_chat_info = html.escape(chat_info)
            await message.answer(escaped_chat_info, parse_mode='HTML')

        except Exception as e:
            print("Error in send_chats:", e)


    @dp.message_handler(commands=['inventory', 'inv'])
    async def show_inventory(message: types.Message):
        try:
            user_id = message.from_user.id
            user_name = message.from_user.first_name

            with db_lock:
                db_cursor.execute(
                    'SELECT item_rarity, item_name, SUM(item_quantity) FROM inventory WHERE user_id = ? GROUP BY '
                    'item_rarity, item_name ORDER BY item_rarity DESC',
                    (user_id,))
                result = db_cursor.fetchall()

            if result:
                inventory_text = f'–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ {user_name} :\n\n'
                items_by_rarity = {}

                for item_rarity, item_name, item_quantity in result:
                    if item_rarity not in items_by_rarity:
                        items_by_rarity[item_rarity] = []
                    items_by_rarity[item_rarity].append(f'{get_item_emoji(item_rarity)}{item_name} x{item_quantity}')

                for item_rarity, items_list in items_by_rarity.items():
                    inventory_text += f'{get_rarity_emoji(item_rarity)}:\n'
                    inventory_text += ', '.join(items_list) + '\n\n'

                markup = types.InlineKeyboardMarkup(row_width=1)
                hide_button = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="hide_inventory")
                markup.add(hide_button)
                inv_user_to_del = await message.answer(inventory_text, reply_markup=markup)
            else:
                empty_inv = await message.answer(f'{user_name}, –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!')

        except Exception as e:
            tex_work = await message.answer("–¢–µ—Ö —Ä–∞–±–æ—Ç—ã")
            await asyncio.sleep(1)
            await bot.delete_message(message.chat.id, tex_work.message_id)


    @dp.callback_query_handler(lambda call: call.data == "hide_inventory")
    async def hide_inventory_callback(call: types.CallbackQuery):
        try:
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=f'–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å–∫—Ä—ã—Ç –∏–≥—Ä–æ–∫–æ–º - {call.from_user.first_name}.',
                                        reply_markup=None)
        except Exception as e:
            print("Error in hide_inventory_callback:", e)


    if __name__ == '__main__':
        from aiogram import executor
        executor.start_polling(dp, skip_updates=True)

except Exception as e:
    print(e)